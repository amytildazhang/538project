alpha.2.idx = which(random.unif >= 0.5 & random.unif < 0.7)
alpha.3.idx = which(random.unif >= 0.7)
z = vector(mode="numeric", length = n)
z[alpha.1.idx] = 1
z[alpha.2.idx] = 2
z[alpha.3.idx] = 3
zeros.idx = which(z == 0)
random.unif[zeros.idx]
?random.unif
?loess
fit = lm(TAdjusted ~ Poll + State + Sample + Type + Week, data=polldata)
library(stringr)
library(ggplot2)
today = as.Date("2012/10/14")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
#Dataset and description of data can be found at
#https://github.com/fivethirtyeight/data/tree/master/pollster-ratings
polls = read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/pollster-ratings/raw-polls.tsv", header=TRUE, sep="\t")
polls = polls[grep(pattern = ".*Pres.*", x=polls$race),]
polls$polldate = as.Date(polls$polldate, format='%m/%d/%Y')
polls$electiondate = as.Date(polls$electiondate, format='%m/%d/%Y')
poll.ratings =  read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/pollster-ratings/pollster-ratings.tsv", header=TRUE, sep="\t")
head(poll.ratings)
nat.polls2012 = read.csv("2012_poll_data.csv", header=TRUE, sep="\t")
state.polls2012 = read.csv("2012_poll_data_states.csv", header=TRUE, sep='\t')
nat.polls2012$State = "USA"
polls2012 = rbind(nat.polls2012, state.polls2012)
#format dates
dates = str_split_fixed(as.character(polls2012$Date), " - ", 2)
polls2012$StartDate = as.Date(paste("2012", dates[,1], sep="/"))
polls2012$EndDate = as.Date(paste("2012", dates[,2], sep="/"))
polls2012$Date = floor(rowMeans(matrix(c(polls2012$StartDate, polls2012$EndDate), ncol=2)))
polls2012$Date = as.Date(polls2012$Date, origin="1970-01-01")
#format "spread"
polls2012$Spread = as.character(polls2012$Spread)
spread = str_split_fixed(polls2012$Spread, " ", 2)
obama = which(spread[,1] == "Obama")
polls2012$Spread[obama] = as.numeric(spread[obama,2])
polls2012$Spread[-obama] = -as.numeric(spread[-obama,2])
setwd("~/Box Sync/Fall 2015/511 Regression Analysis/538project")
library(stringr)
library(ggplot2)
today = as.Date("2012/10/14")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
#Dataset and description of data can be found at
#https://github.com/fivethirtyeight/data/tree/master/pollster-ratings
polls = read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/pollster-ratings/raw-polls.tsv", header=TRUE, sep="\t")
polls = polls[grep(pattern = ".*Pres.*", x=polls$race),]
polls$polldate = as.Date(polls$polldate, format='%m/%d/%Y')
polls$electiondate = as.Date(polls$electiondate, format='%m/%d/%Y')
poll.ratings =  read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/pollster-ratings/pollster-ratings.tsv", header=TRUE, sep="\t")
head(poll.ratings)
nat.polls2012 = read.csv("2012_poll_data.csv", header=TRUE, sep="\t")
state.polls2012 = read.csv("2012_poll_data_states.csv", header=TRUE, sep='\t')
nat.polls2012$State = "USA"
polls2012 = rbind(nat.polls2012, state.polls2012)
#format dates
dates = str_split_fixed(as.character(polls2012$Date), " - ", 2)
polls2012$StartDate = as.Date(paste("2012", dates[,1], sep="/"))
polls2012$EndDate = as.Date(paste("2012", dates[,2], sep="/"))
polls2012$Date = floor(rowMeans(matrix(c(polls2012$StartDate, polls2012$EndDate), ncol=2)))
polls2012$Date = as.Date(polls2012$Date, origin="1970-01-01")
#format "spread"
polls2012$Spread = as.character(polls2012$Spread)
spread = str_split_fixed(polls2012$Spread, " ", 2)
obama = which(spread[,1] == "Obama")
polls2012$Spread[obama] = as.numeric(spread[obama,2])
polls2012$Spread[-obama] = -as.numeric(spread[-obama,2])
polls2012$Spread[which(is.na(polls2012$Spread))] = 0
polls2012$Spread = as.numeric(polls2012$Spread)
#format sample
polls2012$Sample = as.character(polls2012$Sample)
sample = str_split_fixed(polls2012$Sample, " ", 2)
polls2012$Type = sample[,2]
polls2012$Sample = as.numeric(sample[,1])
head(polls2012)
head(polls)
summary(polls)
#Useful groupings within "polls"
state.polls = which(polls$location != 'US')
polls2000 = which(polls$year == 2000)
polls2004 = which(polls$year == 2004)
polls2008 = which(polls$year == 2008)
#polls2012 = which(polls$year == 2012 & polls$polldate < today & polls$type_simple == 'Pres-G')
partisan = which(polls$partisan != '') #these pollsters should be excluded later
head(state.polls)
############################
#Weighted polling average
############################
#http://fivethirtyeight.com/features/how-fivethirtyeight-calculates-pollster-ratings/#fn-31
#find pollster-induced error
polls.beforetoday = which(polls2012$EndDate < today)
polldata = polls2012[polls.beforetoday,]
polldata$Poll = factor(polldata$Poll, levels=levels(poll.ratings$Pollster))
nax = which(is.na(polldata$Poll))
polldata = polldata[-nax,] #take out polls that haven't been rated by 538
#Calculating recency
#http://fivethirtyeight.com/features/how-the-fivethirtyeight-senate-forecast-model-works/#fn-13
daysfrom = as.numeric(difftime(as.Date("2012/11/01"), today, unit='days'))
recencyrate = log(2)/(14 + 0.2*daysfrom)
timedif = as.numeric(difftime(today, polldata$Date))
polldata$recency = exp(-recencyrate * timedif)
#Reason-Rupe/PSRAI = Princeton...
#RCP Average = real clear politics average
#
polldata$rating = NA
for (i in 1:length(poll.ratings$Polls)){
pollster = poll.ratings$Pollster[i]
idx = which(polldata$Poll == pollster)
polldata$rating[idx] = poll.ratings$Predictive.Plus.Minus[i]
}
polldata$Sample[which(is.na(polldata$Sample))] = 600 #538 policy
##########################
##Likely Voter adjustment
##########################
rv = which(polldata$Type == "RV")
polldata$spread[rv] = polldata$spread[rv] - 2.7
#registered voter polls tend to differ from likely voter polls by 2.7 percentage points
##########################
##Trend Line Adjustment
##########################
#Create "week" variable
#Week is defined using "today"
polldata$Week = today - 7*floor(difftime(today, polldata$Date, unit='days')/7)
polldata$week = as.numeric(floor(difftime(today, polldata$Date, unit='days')/7))
polldata$StatePollster = paste(polldata$State,polldata$Poll)
statepollsters = data.frame(StatePollsters = as.character(levels(factor(polldata$StatePollster))))
polldata$TAdjustment = NA
trend.fits = lapply(statepollsters$StatePollsters, function(x){
data = polldata[polldata$StatePollster == x,]
fit = NA
if (length(data$Poll) < 10){ #apparently changing this to ifelse breaks lapply
fit = lm(Spread ~ week, data=data)
}
else {
fit = loess(Spread ~ week, data=data, span=0.85, model=TRUE, surface='direct')
}
predict(fit, newdata=data.frame(week = 0)) - predict(fit, newdata=data)
})
for (i in 1:length(statepollsters$StatePollsters)) {
polldata$TAdjustment[polldata$StatePollster == statepollsters$StatePollsters[i]] = trend.fits[[i]] #apparently doing this inside lapply breaks R
}
polldata$TAdjusted = polldata$TAdjustment + polldata$Spread
fit = lm(TAdjusted ~ Poll + State + Sample + Type + Week, data=polldata)
summary(fit)
fit = lm(TAdjusted ~ Poll + State, data=polldata)
summary(fit)
coef(fit, 'Monmouth University')
plot(fit$fitted.values ~ fit$residuals)
outlierTest(fit)
library(car)
outlierTest(fit)
res = fit$residuals
qqnorm(res)
qqling(res)
qqline(res)
vif(fit)
prp(fit)
crPlot(fit)
crPlots(fit)
outlierTest(fit)
outs = outlierTest(fit)
fit2 = lm(TAdjusted ~ Poll + State, data=polldata[-835,])
vif(fit2)
crPlots(fit2)
outs = outlierTest(fit2)
outs
fit2 = lm(TAdjusted ~ Poll + State, data=polldata[-outs])
fit2 = lm(TAdjusted ~ Poll + State, data=polldata[-outs,])
outs = outlierTest(fit)
outs
outs = which(abs(res) > 4)
outs
outs = which(abs(res) > 4.087220 )
outs
r.star = rstudent(fit)
plot(r.star)
cutoff=qt(.975,df=n-p-1)
cutoff=qt(.975,df=nrow(polldata)-2-1)
abline(h=cutoff)
abline(h=-cutoff)
h=hatvalues(fit)
cutoff.h=2*p/n
cutoff.h
plot(h)
abline(h=cutoff)
cd=cooks.distance(fit)
cd
plot(cd)
outlierTest(fit)
?outlierTest
x = outlierTest(fit)
x
row(x)
as.numeric(rownames(x))
rownames(x)
x
fit2 = lm(TAdjusted ~ Poll + State, data=polldata[-c(835,843,338,391),])
vif(fit2)
crPlots(fit2)
outs = outlierTest(fit2)
outlierTest(fit2)
plot(fit2$fitted.values ~ res)
polldata[835,]
polldata[843,]
1013 - 843
835 - 170
polldata[665,]
out.idx = c(835,843,338,391) - 170
fit2 = lm(TAdjusted ~ Poll + State, data=polldata[-out.idx,])
outlierTest(fit2)
r.star = rstudent(fit)
out.idx = which(abs(r.star) > 4.07)
out.idx
out.idx = which(abs(r.star) > 4.07496)
out.idx
out.idx = which(abs(r.star) > 4.074962)
out.idx
fit2 = lm(TAdjusted ~ Poll + State, data=polldata[-out.idx,])
outlierTest(fit2)
plot(fit$fitted.values ~ r.star)
qqnorm(r.star)
qqline(r.star)
r.star = rstudent(fit)
plot(fit$fitted.values ~ r.star)
plot(fit2$fitted.values ~ r.star)
r.star = rstudent(fit2$residuals)
res = fit2$residuals
r.star = rstudent(fit2)
plot(fit2$fitted.values ~ r.star)
max(res)
which(max(res))
which(res == max(res))
coef(fit) - coef(fit2)
coef(fit)
which(res == max(res))
fit2 = lm(TAdjusted ~ Poll + State, data=polldata[-c(289,244),])
res = fit2$residuals
r.star = rstudent(fit2)
plot(fit2$fitted.values ~ r.star)
fit2 = lm(TAdjusted ~ Poll + State, data=polldata[-c(289,244),])
res = fit2$residuals
r.star = rstudent(fit2)
outlierTest(fit2)
plot(fit2$fitted.values ~ r.star)
qqnorm(res)
qqline(res)
fit2 = lm(TAdjusted ~ Poll + State, data=polldata[-out.idx,])
res = fit2$residuals
r.star = rstudent(fit2)
vif(fit2)
crPlots(fit2)
outlierTest(fit2)
?design
?model.matrix
model.matrix(fit)
rank(model.matrix(fit))
rankMatrix(model.matrix(fit))
library("Matrix", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("matrixcalc", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("matrixcalc", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
rankMatrix(model.matrix(fit))
rankMatrix
?rankMatrix
rankMatrix
rankMatrix(model.matrix(fit))
setwd("~/Downloads")
pay=read.csv("TeacherPay.csv")
pairs(pay)
fit=lm(PAY~SPEND,data=pay)
summary(fit)
plot(pay$SPEND,pay$PAY,xlab="State Spending Per Student",ylab="Avg Teacher Salary")
plot(fit)
rank(model.matrix(fit))
rankMatrix(model.matrix(fit))
p = rankMatrix(model.matrix(fit))
p
p[1]
fit = lm(TAdjusted ~ Poll + State, data=polldata)
p = rankMatrix(model.matrix(fit))
p = p[1]
pairs(pay)
fit=lm(PAY~SPEND,data=pay)
outlierTest(fit)
beta = fit$coefficients[2]
coef(fit)
setwd("~/Box Sync/Fall 2015/511 Regression Analysis/538project")
fit = lm(TAdjusted ~ Poll + State, data=polldata)
coef(fit)
res = fit$residuals
?solve
?model.matrix.lm
X = model.matrix(fit)
p = rankMatrix(X)
p = p[1]
se = sqrt(var(res)*solve(t(X) %*% X))
fit = lm(TAdjusted ~ Poll, data=polldata)
res = fit$residuals
vif(fit)
library(car)
outs = outlierTest(fit)
outlierTest(fit)
X = model.matrix(fit)
p = rankMatrix(X)
p = p[1]
beta = fit$coefficients[2]
se = sqrt(var(res)*solve(t(X) %*% X))
p
factor(polldata$Poll)
p
fit = lm(TAdjusted ~ Poll + State, data=polldata)
res = fit$residuals
X = model.matrix(fit)
p = rankMatrix(X)
p = p[1]
p
79 + 51
which(nrow(polldata[polldata$StatePollster == statepollsters$StatePollsters,]) == 1)
aaarg = NA
lapply(statepollsters$StatePollsters, function(x){
bl = which(polldata$StatePollster == x)
data = polldata[bl,]
ifelse(nrow(data) == 1, aaarg = paste(aaarg, bl), aaarg
})
aaarg = NA
lapply(statepollsters$StatePollsters, function(x){
bl = which(polldata$StatePollster == x)
data = polldata[bl,]
ifelse(nrow(data) == 1, aaarg = paste(aaarg, bl), aaarg)
})
aaarg = NA
lapply(statepollsters$StatePollsters, function(x){
bl = which(polldata$StatePollster == x)
if (length(bl) == 1) {aaarg = paste(aaarg, bl)}
})
aarg = NA
lapply(statepollsters$StatePollsters, function(x){
bl = which(polldata$StatePollster == x)
if (length(bl) == 1) {aaarg = paste(aaarg, bl)}
})
aaarg
aaarg = lapply(statepollsters$StatePollsters, function(x){
bl = which(polldata$StatePollster == x)
if (length(bl) == 1) {
bl
}
})
aaarg
aaarg = lapply(statepollsters$StatePollsters, function(x){
bl = which(polldata$StatePollster == x)
if (length(bl) == 1) {
print(bl)
bl
}
})
cbind(aaarg)
which(aaarg > 0)
which(is.null(aaarg))
?is.null
aaarg
aaarg = cbind(aaarg)
aaarg
aaarg
which(is.null(aaarg))
?is.numeric
which(is.numeric(aaarg))
which(aaarg != 0)
polldata$Sampleweight = sqrt(polldata$Sample/600)
p
79 + 51
sample.error = rep(NA, length(polldata$rating))
polls
head(polls)
sample.error = rep(NA, length(polls$pollno)) #based off of past poll results
polls$sample.error = 80 * polls$samplesize^-0.5
polls$PIE = polls$error - polls$sample.error
min(polls$PIE)
?mean
polls$IAE = NA
polls$IAE = NA
for (i in 1:length(polls$PIE)){
race = polls$race
others = polls[polls$race == race,]
avg = mean(others$PIE)
polls$IAE[i] = polls$PIE[i] - avg
}
polls$IAE
se = sd(polls$IAE)/sqrt(length(polls$IAE))
polls$sample.error = 80 * polls$samplesize^-0.5
polls$PIE = polls$error - polls$sample.error
polls$IAE = NA
polls$plus.min = NA
for (i in 1:length(polls$PIE)){
race = polls$race
others = polls[polls$race == race,]
polls$IAE[i] = mean(others$PIE)
polls$plus.min= polls$PIE[i] - avg
}
housefx.fit = lm(TAdjusted ~ State + Poll, data=polldata)
res = housefx.fit$residuals
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
?dcast
dcast(polldata, State ~ Poll, length)
count.polls = dcast(polldata, State ~ Poll, length)
head(count.polls)
?melt
?melt.data.frame
df = melt(polldata, id=c("Poll", "State"))
df
head(df)
head(polldata)
df = melt(polldata[c(1,8)], id=c("Poll", "State"))
head(df)
df$count = 1
cast(df, Poll + Data ~., )
dcast(df, Poll + Data ~., )
dcast(df, Poll + State ~., )
head(dcast(df,State ~ Poll, ))
count.polls = dcast(polldata, State + Poll ~, length)
count.polls = dcast(polldata, State + Poll ~., length)
count.polls
head(count.polls)
head(count.polls)
count.poll$Poll
count.polls$Poll
count.polls$.
head(count.polls)
which(count.polls$. == 1)
singleton.idx = which(count.polls$. == 1)
count.states = dcast(polldata, Poll + State ~., length)
count.states
head(count.states)
a = count.polls$Poll[singleton.idx]
count.polls = dcast(polldata, Poll  ~., length)
count.polls
count.polls = dcast(polldata, Poll  ~., length)
singleton.idx = which(count.polls$. == 1) #states with polls conducted by only one pollsters
a = count.polls$Poll[singleton.idx]
a
a.idx = rep(NA, length(a))
count.polls = dcast(polldata, Poll  ~., length)
singleton.idx = which(count.polls$. == 1) #states with polls conducted by only one pollsters
a = count.polls$Poll[singleton.idx]
a.idx = sapply(a, function(x){
which(polldata$Poll == x)
})
a.idx
housefx.fit = lm(TAdjusted ~ State + Poll, data=polldata[-a.idx,])
vif(housefx.fit)
library(car)
vif(housefx.fit)
polldata$Poll[a.idx]
housefx.fit = lm(TAdjusted ~ State*Poll, data=polldata)
vif(housefx.fit)
elect.votes = read.csv("electoral_votes.csv")
head(elect.votes) #number of votes for each state
state.abb
?state
for (i in 1:50){
elect.votes$State[i] = state.abb[which(state.name == elect.votes$State[i])]
}
for (i in 1:50){
print(which(state.name == elect.votes$State[i]))
elect.votes$State[i] = state.abb[which(state.name == elect.votes$State[i])]
}
state.name
elect.votes$State = as.character(elect.votes$State)
head(elect.votes) #number of votes for each state
elect.votes$State
elect.votes = read.csv("electoral_votes.csv")
elect.votes = read.csv("electoral_votes.csv")
head(elect.votes) #number of votes for each state
as.character(elect.votes$State[1])
elect.votes$State = as.character(elect.votes$State)
head(elect.votes) #number of votes for each state
state.name
which(state.name == elect.votes$State[1])
state.abb[5]
elect.votes = read.csv("electoral_votes.csv")
elect.votes$State = as.character(elect.votes$State)
for (i in 1:50){
print(elect.votes$State[i])
idx= which(state.name == elect.votes$State[i])
elect.votes$State[i] = state.abb[idx]
}
elect.votes$State
numeric(0)
is.null(numeric(0))
numeric(0) == 0
logical(0)
elect.votes = read.csv("electoral_votes.csv")
elect.votes$State = as.character(elect.votes$State)
for (i in 1:50){
idx= which(state.name == elect.votes$State[i])
if (length(idx) != 0){elect.votes$State[i] = state.abb[idx]}
}
elect.votes$State
elect.votes = read.csv("electoral_votes.csv")
elect.votes$State = as.character(elect.votes$State)
for (i in 1:51){
idx= which(state.name == elect.votes$State[i])
if (length(idx) != 0){elect.votes$State[i] = state.abb[idx]}
else {elect.votes$State[i] = "DC"}
}
head(elect.votes) #number of votes for each state
elect.votes$State
head(polldata)
predicted.votes = data.frame(State = elect.votes$State, votes = 0)
?round
