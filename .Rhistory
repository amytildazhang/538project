?map
elect.votes = read.csv("electoral_votes.csv")
elect.votes$State = as.character(elect.votes$State)
elect.votes$StateAbb = NA
for (i in 1:51){
idx= which(state.name == elect.votes$State[i])
if (length(idx) != 0){elect.votes$StateAbb[i] = state.abb[idx]}
else {elect.votes$StateAbb[i] = "DC"}
}
head(elect.votes) #number of votes for each state
predicted.votes = data.frame(State = elect.votes$StateAbb, Votes = 0, region=tolower(elect.votes$State))
head(predicted.votes)
for (i in 1:51){
print(paste(i, elect.votes$State[i]))
if (elect.votes$StateAbb[i] == 'DC') {
print("is DC")
nationaldata = polldata[polldata$State == 'USA',]
spread = nationaldata$HXAdjusted
pop.vote = mean(spread * nationaldata$Sampleweight * nationaldata$recency * nationaldata$rating)
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
else {
statedata = polldata[polldata$State == elect.votes$StateAbb[i],]
spread = statedata$HXAdjusted
print(spread)
pop.vote = mean(spread * statedata$Sampleweight * statedata$recency * statedata$rating)
print(pop.vote)
if (elect.votes$StateAbb[i] == 'MN' | elect.votes$StateAbb[i] == 'NE'){
print("is MN or NE")
obama.perc = pop.vote + 50
predicted.votes$Votes[i] = round(obama.perc/100 * elect.votes$Votes[i])
}
else {
print("is not MN, NE, DC")
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
}
}
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, "blue", "red")
map('state', fill=TRUE, col=predicted.votes$Obama)
predicted.votes
polldata$HXAdjusted = polldata$TAdjusted
for (i in 1:length(polldata$Poll)){
pster = as.character(polldata$Poll[i])
total.hfx = housefx$Total[housefx$Poll == pster]
if (length(total.hfx != 0)) {
#length of total.hfx will be 0 if it was a poll conducted by a pollster
#who only has polls in one of the states that were taken out
polls$HXAdjusted[i] = polls$TAdjusted[i] - total.hfx
}
}
elect.votes = read.csv("electoral_votes.csv")
elect.votes$State = as.character(elect.votes$State)
elect.votes$StateAbb = NA
for (i in 1:51){
idx= which(state.name == elect.votes$State[i])
if (length(idx) != 0){elect.votes$StateAbb[i] = state.abb[idx]}
else {elect.votes$StateAbb[i] = "DC"}
}
head(elect.votes) #number of votes for each state
predicted.votes = data.frame(State = elect.votes$StateAbb, Votes = 0, region=tolower(elect.votes$State))
head(predicted.votes)
for (i in 1:51){
print(paste(i, elect.votes$State[i]))
if (elect.votes$StateAbb[i] == 'DC') {
print("is DC")
nationaldata = polldata[polldata$State == 'USA',]
spread = nationaldata$HXAdjusted
pop.vote = mean(spread * nationaldata$Sampleweight * nationaldata$recency * nationaldata$rating)
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
else {
statedata = polldata[polldata$State == elect.votes$StateAbb[i],]
spread = statedata$HXAdjusted
print(spread)
pop.vote = mean(spread * statedata$Sampleweight * statedata$recency * statedata$rating)
print(pop.vote)
if (elect.votes$StateAbb[i] == 'MN' | elect.votes$StateAbb[i] == 'NE'){
print("is MN or NE")
obama.perc = pop.vote + 50
predicted.votes$Votes[i] = round(obama.perc/100 * elect.votes$Votes[i])
}
else {
print("is not MN, NE, DC")
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
}
}
predicted.votes
library(maps)
library(ggplot2)
all_states = map_data("state")
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, "blue", "red")
Total = merge(all_states, predicted.votes, by="region")
head(Total)
Total = Total[Total$region!="district of columbia",]
map('state', fill=TRUE, col=predicted.votes$Obama)
predicted.votes
map('state', fill=TRUE, col=predicted.votes$Obama)
map('state', fill=TRUE, col=predicted.votes$Obama)
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, "blue", "red")
map('state', fill=TRUE, col=predicted.votes$Obama)
predicted.votes
install.packages('ggmap')
map('state', fill=TRUE, col=predicted.votes$Obama)
predicted.votes
library(ggmap)
?get_map
install.packages('googleVis')
library(googleVis)
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Votes), locationvar=state, numvar=outcome, options=list(region='US',dataMode='regions',colors=c('0x3B5295','0x8A2448')))
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Votes), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors=c('0x3B5295','0x8A2448')))
map
plot(map)
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Votes), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448']"))
plot(map)
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448']"))
plot(map)
install.packages("plotly")
library(plotly)
l = list(color = toRGB("white"), width = 2)
?list
?plot_ly
library(plotly)
# give state boundaries a white border
l = list(color = toRGB("white"), width = 2)
# specify some map projection/options
g = list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(predicted.votes, z = 'Obama', locations = 'region', showlegend=FALSE, type = 'choropleth', text = 'Votes', locationmode = 'USA-states', color = Obama, colors = 'Purples', marker = list(line = l), layout(title = 'Predicted State Results for 2012 Election', geo = g))
plot_ly(predicted.votes, z = Obama, locations = region, showlegend=FALSE, type = 'choropleth', text = Votes, locationmode = 'USA-states', color = Obama, colors = 'Purples', marker = list(line = l), layout(title = 'Predicted State Results for 2012 Election', geo = g))
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, 1, 2)
predicted.votes$Obama = ifelse(is.na(predicted.votes$Votes), 3, predicted.votes$Votes)
predicted.votes
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, 1, 2)
predicted.votes$Obama = ifelse(is.na(predicted.votes$Votes), 3, predicted.votes$Obama)
predicted.votes
?gvisGeoMap
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, 1, 2)
predicted.votes$Obama = ifelse(is.na(predicted.votes$Votes), 0, predicted.votes$Obama)
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448', '0xFFFFFF']"))
plot(map)
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, 0, 1)
predicted.votes$Obama = ifelse(is.na(predicted.votes$Votes), 2, predicted.votes$Obama)
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448', '0xFFFFFF']"))
plot(map)
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448', '0xFFFFFF']"), showLegend = FALSE)
plot(map)
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448', '0xFFFFFF']", showLegend = FALSE))
plot(map)
actual = c(0,0,0,0,55,9,7,3,3,29,0,4,0,20,0,6,0,0,0,2,1,1,10,11,16,10,0,0,0,0,6,4,14,5,29,0,0,18,0,7,20,4,0,0,0,0,0,3,13,12,0,10,0)
predicted.votes$State
elect.votes$actual = c(0,0,0,0,55,9,7,3,3,29,0,4,0,20,0,6,0,0,0,2,1,1,10,11,16,10,0,0,0,0,6,4,14,5,29,0,0,18,0,7,20,4,0,0,0,0,0,3,13,12,0,10,0)
elect.votes$actual = c(0,0,0,0,55,9,7,3,3,29,0,4,0,20,0,6,0,0,0,4,10,11,16,10,0,0,0,0,6,4,14,5,29,0,0,18,0,7,20,4,0,0,0,0,0,3,13,12,0,10,0)
elect.votes$State
elect.votes$actual = c(55,0,29,29,20,20,18,16,0,0,14,13,12,11,0,0,0,0,10,#maryland
10, 10,10,0,9,0,0,0,7,0,7,6,0,0,0,6,0,0,5,0,4,0,2,4,4,0,3,3,0,0,0,3,0)
elect.votes = read.csv("electoral_votes.csv")
elect.votes$State = as.character(elect.votes$State)
elect.votes$StateAbb = NA
for (i in 1:51){
idx= which(state.name == elect.votes$State[i])
if (length(idx) != 0){elect.votes$StateAbb[i] = state.abb[idx]}
else {elect.votes$StateAbb[i] = "DC"}
}
head(elect.votes) #number of votes for each state
predicted.votes = data.frame(State = elect.votes$StateAbb, Votes = 0, region=tolower(elect.votes$State))
head(predicted.votes)
for (i in 1:51){
print(paste(i, elect.votes$State[i]))
if (elect.votes$StateAbb[i] == 'DC') {
print("is DC")
nationaldata = polldata[polldata$State == 'USA',]
spread = nationaldata$HXAdjusted
pop.vote = mean(spread * nationaldata$Sampleweight * nationaldata$recency * nationaldata$rating)
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
else {
statedata = polldata[polldata$State == elect.votes$StateAbb[i],]
spread = statedata$HXAdjusted
print(spread)
pop.vote = mean(spread * statedata$Sampleweight * statedata$recency * statedata$rating)
print(pop.vote)
if (elect.votes$StateAbb[i] == 'MN' | elect.votes$StateAbb[i] == 'NE'){
print("is MN or NE")
obama.perc = pop.vote + 50
predicted.votes$Votes[i] = round(obama.perc/100 * elect.votes$Votes[i])
}
else {
print("is not MN, NE, DC")
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
}
}
elect.votes$actual = c(0,0,0,0,55,9,7.3,3,29,0,4,0,20,0,6,0,0,0,4,10,11,16.10,0,0,0,0,6,4,14,5,29,0,0,18,0,7,20,4,0,0,0,0,0,3,13,12,0,10,0)
elect.votes$actual = c(0,0,0,0,55,9,7,3,3,29,0,4,0,20,0,6,0,0,0,4,10,11,16,10,0,0,0,0,6,4,14,5,29,0,0,18,0,7,20,4,0,0,0,0,0,3,13,12,0,10,0)
elect.votes
elect.votes$Obama = ifelse(elect.votes$actual > 0, 0, 1)
elect.votes$Obama = ifelse(is.na(elect.votes$actual), 2, elect.votes$Obama)
elect.votes
actual.map = gvisGeoMap(data.frame(state = elect.votes$State, outcome = elect.votes$Obama), locationvar='State', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448', '0xFFFFFF']", showLegend = FALSE))
actual.map = gvisGeoMap(data.frame(state = elect.votes$State, outcome = elect.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448', '0xFFFFFF']", showLegend = FALSE))
plot(actual.map)
elect.votes
actual.map = gvisGeoMap(data.frame(state = elect.votes$State, outcome = elect.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448']", showLegend = FALSE))
plot(actual.map)
plot(map)
plot(actual.map)
which(elect.votes$actual != predicted.votes$Votes)
err.idx = which(elect.votes$actual != predicted.votes$Votes)
predicted.votes$actual = elect.votes$actual
predicted.votes
predicted.votes$State[err.idx]
polldata[polldata$State == 'AZ',]
polldata$TAdjustment = NA
trend.fits = lapply(statepollsters$StatePollsters, function(x){
data = polldata[polldata$StatePollster == x,]
fit = NA
if (length(data$Poll) < 5) {
0
}
#  if (length(data$Poll) < 10){ #apparently changing this to ifelse breaks lapply
#    fit = lm(Spread ~ week, data=data)
#    predict(fit, newdata=data.frame(week = 0)) - predict(fit, newdata=data)
#  }
else {
fit = loess(Spread ~ week, data=data, span=0.85, model=TRUE, surface='direct')
predict(fit, newdata=data.frame(week = 1)) - predict(fit, newdata=data)
}
})
for (i in 1:length(statepollsters$StatePollsters)) {
polldata$TAdjustment[polldata$StatePollster == statepollsters$StatePollsters[i]] = trend.fits[[i]] #apparently doing this inside lapply breaks R
}
polldata$TAdjusted = polldata$TAdjustment + polldata$Spread
max(polldata$TAdjusted)
polldata[polldata$State == 'AZ',]
housefx.fit = lm(TAdjusted ~ State + Poll, data=polldata[-c(ok.idx, la.idx, ar.idx),])
vif(housefx.fit)
res = housefx.fit$residuals
outlierTest(housefx.fit) #744, 748, 746, 743, 745
plot(housefx.fit$fitted.values ~ res)
plot(housefx.fit2$fitted.values ~ r.star)
abline(0,0,col="red")
housefx = summary(housefx.fit)
hfx = housefx$coefficients[-seq(1,42,1),1]
se = housefx$coefficients[-seq(1,42,1),2]
n = nrow(polldata[-c(ok.idx, la.idx, ar.idx),])
p = rankMatrix(X)
p = p[1]
buffers = 2*se * qt(0.95, n - p)
housefx = data.frame(Poll = names(hfx), HouseEffect = as.numeric(hfx), Buffer = as.numeric(se))
names = str_split_fixed(housefx$Poll, "Poll", 2)
housefx$Poll = names[,2]
housefx$Total = ifelse(housefx$HouseEffect < 0, housefx$HouseEffect + housefx$Buffer, housefx$HouseEffect - housefx$Buffer)
polldata$HXAdjusted = polldata$TAdjusted
for (i in 1:length(polldata$Poll)){
pster = as.character(polldata$Poll[i])
total.hfx = housefx$Total[housefx$Poll == pster]
if (length(total.hfx != 0)) {
#length of total.hfx will be 0 if it was a poll conducted by a pollster
#who only has polls in one of the states that were taken out
polls$HXAdjusted[i] = polls$TAdjusted[i] - total.hfx
}
}
elect.votes = read.csv("electoral_votes.csv")
elect.votes$State = as.character(elect.votes$State)
elect.votes$StateAbb = NA
for (i in 1:51){
idx= which(state.name == elect.votes$State[i])
if (length(idx) != 0){elect.votes$StateAbb[i] = state.abb[idx]}
else {elect.votes$StateAbb[i] = "DC"}
}
head(elect.votes) #number of votes for each state
predicted.votes = data.frame(State = elect.votes$StateAbb, Votes = 0, region=tolower(elect.votes$State))
head(predicted.votes)
for (i in 1:51){
if (elect.votes$StateAbb[i] == 'DC') {
nationaldata = polldata[polldata$State == 'USA',]
spread = nationaldata$HXAdjusted
pop.vote = mean(spread * nationaldata$Sampleweight * nationaldata$recency * nationaldata$rating)
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
else {
statedata = polldata[polldata$State == elect.votes$StateAbb[i],]
spread = statedata$HXAdjusted
pop.vote = mean(spread * statedata$Sampleweight * statedata$recency * statedata$rating)
if (elect.votes$StateAbb[i] == 'MN' | elect.votes$StateAbb[i] == 'NE'){
obama.perc = pop.vote + 50
predicted.votes$Votes[i] = round(obama.perc/100 * elect.votes$Votes[i])
}
else {
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
}
}
predicted.votes
library(maps)
library(ggplot2)
library(ggmap)
library(googleVis)
all_states = map_data("state")
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, 0, 1)
predicted.votes$Obama = ifelse(is.na(predicted.votes$Votes), 2, predicted.votes$Obama)
#Total = merge(all_states, predicted.votes, by="region")
#head(Total)
#Total = Total[Total$region!="district of columbia",]
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448', '0xFFFFFF']", showLegend = FALSE))
plot(map)
elect.votes$actual = c(0,0,0,0,55,9,7,3,3,29,0,4,0,20,0,6,0,0,0,4,10,11,16,10,0,0,0,0,6,4,14,5,29,0,0,18,0,7,20,4,0,0,0,0,0,3,13,12,0,10,0)
elect.votes$Obama = ifelse(elect.votes$actual > 0, 0, 1)
elect.votes$Obama = ifelse(is.na(elect.votes$actual), 2, elect.votes$Obama)
actual.map = gvisGeoMap(data.frame(state = elect.votes$State, outcome = elect.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448']", showLegend = FALSE))
plot(actual.map)
err.idx = which(elect.votes$actual != predicted.votes$Votes) #does not include NAs
predicted.votes$State[err.idx]
polldata[polldata$State == 'MN',]
housefx = data.frame(Poll = names(hfx), HouseEffect = as.numeric(hfx), Buffer = as.numeric(se))
head(housefx)
names = str_split_fixed(housefx$Poll, "Poll", 2)
housefx$Poll = names[,2]
head(housefx)
housefx[housefx$Poll == "Public Policy Polling",]
housefx$Total = ifelse(housefx$HouseEffect < 0, housefx$HouseEffect + housefx$Buffer, housefx$HouseEffect - housefx$Buffer)
polldata$HXAdjusted = polldata$TAdjusted
housefx[housefx$Poll == "Public Policy Polling",]
polldata$HXAdjusted = polldata$TAdjusted
for (i in 1:length(polldata$Poll)){
pster = as.character(polldata$Poll[i])
total.hfx = housefx$Total[housefx$Poll == pster]
if (length(total.hfx != 0)) {
if (pster == "Public Policy Polling") {print("made it")}
#length of total.hfx will be 0 if it was a poll conducted by a pollster
#who only has polls in one of the states that were taken out
polls$HXAdjusted[i] = polls$TAdjusted[i] - total.hfx
}
}
polldata$HXAdjusted = polldata$TAdjusted
for (i in 1:length(polldata$Poll)){
pster = as.character(polldata$Poll[i])
total.hfx = housefx$Total[housefx$Poll == pster]
if (length(total.hfx != 0)) {
if (pster == "Public Policy Polling") {print(paste("made it"), total.hfx)}
#length of total.hfx will be 0 if it was a poll conducted by a pollster
#who only has polls in one of the states that were taken out
polls$HXAdjusted[i] = polls$TAdjusted[i] - total.hfx
}
}
data$HXAdjusted = polldata$TAdjusted
for (i in 1:length(polldata$Poll)){
pster = as.character(polldata$Poll[i])
total.hfx = housefx$Total[housefx$Poll == pster]
if (length(total.hfx != 0)) {
if (pster == "Public Policy Polling") {print(paste("made it"), total.hfx)
print(total.hfx)}
#length of total.hfx will be 0 if it was a poll conducted by a pollster
#who only has polls in one of the states that were taken out
polls$HXAdjusted[i] = polls$TAdjusted[i] - total.hfx
}
}
polldata$HXAdjusted = polldata$TAdjusted
for (i in 1:length(polldata$Poll)){
pster = as.character(polldata$Poll[i])
total.hfx = housefx$Total[housefx$Poll == pster]
if (length(total.hfx != 0)) {
if (pster == "Public Policy Polling") {
#length of total.hfx will be 0 if it was a poll conducted by a pollster
#who only has polls in one of the states that were taken out
print(polls$TAdjusted[i] - total.hfx)}
polls$HXAdjusted[i] = polls$TAdjusted[i] - total.hfx
}
}
polldata$HXAdjusted = polldata$TAdjusted
for (i in 1:length(polldata$Poll)){
pster = as.character(polldata$Poll[i])
total.hfx = housefx$Total[housefx$Poll == pster]
if (length(total.hfx != 0)) {
if (pster == "Public Policy Polling") {
#length of total.hfx will be 0 if it was a poll conducted by a pollster
#who only has polls in one of the states that were taken out
print(polls$TAdjusted[i])
print(total.hfx)}
polls$HXAdjusted[i] = polls$TAdjusted[i] - total.hfx
}
}
polldata$HXAdjusted = polldata$TAdjusted
for (i in 1:length(polldata$Poll)){
pster = as.character(polldata$Poll[i])
total.hfx = housefx$Total[housefx$Poll == pster]
if (length(total.hfx != 0)) {
if (pster == "Public Policy Polling") {
#length of total.hfx will be 0 if it was a poll conducted by a pollster
#who only has polls in one of the states that were taken out
print(paste(i, polls$TAdjusted[i]))
print(total.hfx)}
polls$HXAdjusted[i] = polls$TAdjusted[i] - total.hfx
}
}
polldata$HXAdjusted = polldata$TAdjusted
for (i in 1:length(polldata$Poll)){
pster = as.character(polldata$Poll[i])
total.hfx = housefx$Total[housefx$Poll == pster]
if (length(total.hfx != 0)) {
if (pster == "Public Policy Polling") {
#length of total.hfx will be 0 if it was a poll conducted by a pollster
#who only has polls in one of the states that were taken out
print(paste(i, polls$TAdjusted[i]))
print(total.hfx)}
polldata$HXAdjusted[i] = polldata$TAdjusted[i] - total.hfx
}
}
elect.votes = read.csv("electoral_votes.csv")
elect.votes$State = as.character(elect.votes$State)
elect.votes$StateAbb = NA
for (i in 1:51){
idx= which(state.name == elect.votes$State[i])
if (length(idx) != 0){elect.votes$StateAbb[i] = state.abb[idx]}
else {elect.votes$StateAbb[i] = "DC"}
}
head(elect.votes) #number of votes for each state
predicted.votes = data.frame(State = elect.votes$StateAbb, Votes = 0, region=tolower(elect.votes$State))
head(predicted.votes)
for (i in 1:51){
if (elect.votes$StateAbb[i] == 'DC') {
nationaldata = polldata[polldata$State == 'USA',]
spread = nationaldata$HXAdjusted
pop.vote = mean(spread * nationaldata$Sampleweight * nationaldata$recency * nationaldata$rating)
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
else {
statedata = polldata[polldata$State == elect.votes$StateAbb[i],]
spread = statedata$HXAdjusted
pop.vote = mean(spread * statedata$Sampleweight * statedata$recency * statedata$rating)
if (elect.votes$StateAbb[i] == 'MN' | elect.votes$StateAbb[i] == 'NE'){
obama.perc = pop.vote + 50
predicted.votes$Votes[i] = round(obama.perc/100 * elect.votes$Votes[i])
}
else {
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
}
}
all_states = map_data("state")
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, 0, 1)
predicted.votes$Obama = ifelse(is.na(predicted.votes$Votes), 2, predicted.votes$Obama)
#Total = merge(all_states, predicted.votes, by="region")
#head(Total)
#Total = Total[Total$region!="district of columbia",]
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448', '0xFFFFFF']", showLegend = FALSE))
plot(map)
elect.votes$actual = c(0,0,0,0,55,9,7,3,3,29,0,4,0,20,0,6,0,0,0,4,10,11,16,10,0,0,0,0,6,4,14,5,29,0,0,18,0,7,20,4,0,0,0,0,0,3,13,12,0,10,0)
elect.votes$Obama = ifelse(elect.votes$actual > 0, 0, 1)
elect.votes$Obama = ifelse(is.na(elect.votes$actual), 2, elect.votes$Obama)
actual.map = gvisGeoMap(data.frame(state = elect.votes$State, outcome = elect.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448']", showLegend = FALSE))
plot(actual.map)
polldata[polldata$State == 'AZ',]
polldata[polldata$State == 'MN',]
predicted.votes
predicted.votes$actual = elect.votes$actual
head(predicted.votes)
predicted.votes$error = predicted.votes$Votes - predicted.votes$actual != 0
predicted.votes$error
err.idx = which(predicted.votes$error)
predicted.votes$State[err.idx]
predicted.votes
for (i in 1:51){
if (elect.votes$StateAbb[i] == 'DC') {
nationaldata = polldata[polldata$State == 'USA',]
spread = nationaldata$HXAdjusted
pop.vote = mean(spread * nationaldata$Sampleweight * nationaldata$recency * nationaldata$rating)
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
else {
statedata = polldata[polldata$State == elect.votes$StateAbb[i],]
spread = statedata$HXAdjusted
pop.vote = mean(spread * statedata$Sampleweight * statedata$recency * statedata$rating)
if (elect.votes$StateAbb[i] == 'ME' | elect.votes$StateAbb[i] == 'NE'){
obama.perc = pop.vote + 50
predicted.votes$Votes[i] = round(obama.perc/100 * elect.votes$Votes[i])
}
else {
predicted.votes$Votes[i] = ifelse(pop.vote > 0, elect.votes$Votes[i], 0)
}
}
}
predicted.votes
library(googleVis)
all_states = map_data("state")
predicted.votes$Obama = ifelse(predicted.votes$Votes > 0, 0, 1)
predicted.votes$Obama = ifelse(is.na(predicted.votes$Votes), 2, predicted.votes$Obama)
#Total = merge(all_states, predicted.votes, by="region")
#head(Total)
#Total = Total[Total$region!="district of columbia",]
map = gvisGeoMap(data.frame(state = predicted.votes$region, outcome = predicted.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448', '0xFFFFFF']", showLegend = FALSE))
plot(map)
elect.votes$actual = c(0,0,0,0,55,9,7,3,3,29,0,4,0,20,0,6,0,0,0,4,10,11,16,10,0,0,0,0,6,4,14,5,29,0,0,18,0,7,20,4,0,0,0,0,0,3,13,12,0,10,0)
elect.votes$Obama = ifelse(elect.votes$actual > 0, 0, 1)
elect.votes$Obama = ifelse(is.na(elect.votes$actual), 2, elect.votes$Obama)
actual.map = gvisGeoMap(data.frame(state = elect.votes$State, outcome = elect.votes$Obama), locationvar='state', numvar='outcome', options=list(region='US',dataMode='regions',colors="['0x3B5295','0x8A2448']", showLegend = FALSE))
plot(actual.map)
predicted.votes$actual = elect.votes$actual
#AZ, MN, MO, NE NH, NC
predicted.votes$error = predicted.votes$Votes - predicted.votes$actual != 0
err.idx = which(predicted.votes$error)
predicted.votes$State[err.idx]
predicted.votes
predicted.votes$State[err.idx]
polldata[polldata$State == 'AZ',]
polldata[polldata$State == 'MO',]
